(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"+/SG":function(e,t,r){"use strict";r.r(t),r.d(t,"CryptographyModule",(function(){return b}));var a=r("ofXK"),n=r("tyNb"),s=r("fXoL");const i=[{path:"",component:(()=>{class e{constructor(){}ngOnInit(){}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=s.Eb({type:e,selectors:[["app-cryptography"]],decls:45,vars:0,consts:[[1,"display-4"],[1,"lead"],["href","https://github.com/donaldmcdougal/crypto",1,"btn","btn-lg","btn-primary"]],template:function(e,t){1&e&&(s.Pb(0,"h1",0),s.xc(1,"Cryptography"),s.Ob(),s.Pb(2,"p",1),s.xc(3,"Provides cryptography utilities in Java."),s.Ob(),s.Pb(4,"p"),s.Pb(5,"b"),s.xc(6,"The cryptography utilities provide cryptography functionality using the following algorithms:"),s.Ob(),s.Ob(),s.Pb(7,"ul"),s.Pb(8,"li"),s.xc(9,"AES"),s.Ob(),s.Pb(10,"ul"),s.Pb(11,"li"),s.xc(12,"Character arrays or strings may be used to generate secret keys."),s.Ob(),s.Pb(13,"li"),s.xc(14,"Byte arrays can be encrypted and decrypted."),s.Ob(),s.Pb(15,"li"),s.xc(16,"Files can be encrypted and decrypted."),s.Ob(),s.Pb(17,"li"),s.xc(18,"Streams can be encrypted and decrypted."),s.Ob(),s.Pb(19,"li"),s.xc(20,"It is possible to set both the initialization vector and the password salt."),s.Ob(),s.Ob(),s.Pb(21,"li"),s.xc(22,"ECC (Elliptic Curve Cryptography)"),s.Ob(),s.Pb(23,"ul"),s.Pb(24,"li"),s.xc(25,"A key pair generator is used to generate random public and private keys."),s.Ob(),s.Pb(26,"li"),s.xc(27,"The private key can be used to sign an array of bytes, returning the signature as an array of bytes."),s.Ob(),s.Pb(28,"li"),s.xc(29,"The public key can be used to verify an array of bytes given the bytes and signature."),s.Ob(),s.Pb(30,"li"),s.xc(31,"Two sets of keys can be used to come to a key agreement, allowing two parties to use a shared secret key. Each party uses the other party's public key and their own private key to generate the key. As long as the two parties use each other's and their own private keys to generate the secret, the shared secret will be the same, so both parties can use for encrypting and decrypting data. This allows for communication over a secure channel."),s.Ob(),s.Ob(),s.Pb(32,"li"),s.xc(33,"RSA"),s.Ob(),s.Pb(34,"ul"),s.Pb(35,"li"),s.xc(36,"A key pair generator is used to generate random public and private keys."),s.Ob(),s.Pb(37,"li"),s.xc(38,"The private key can be used to sign an array of bytes, returning the signature as an array of bytes."),s.Ob(),s.Pb(39,"li"),s.xc(40,"The public key can be used to verify an array of bytes given the bytes and signature."),s.Ob(),s.Pb(41,"li"),s.xc(42,"In RSA, you should be able to encrypt files, streams, and byte arrays using a public key and decrypt them using a private key. Generating a shared secret is not supported (yet)."),s.Ob(),s.Ob(),s.Ob(),s.Pb(43,"a",2),s.xc(44,"View the code here"),s.Ob())},styles:[""]}),e})()}];let o=(()=>{class e{}return e.\u0275mod=s.Ib({type:e}),e.\u0275inj=s.Hb({factory:function(t){return new(t||e)},imports:[[n.b.forChild(i)],n.b]}),e})(),b=(()=>{class e{}return e.\u0275mod=s.Ib({type:e}),e.\u0275inj=s.Hb({factory:function(t){return new(t||e)},imports:[[a.b,o]]}),e})()}}]);